services:
  sqlserver:
      image: mcr.microsoft.com/mssql/server:2022-latest
      container_name: sqlserver
      environment:
        SA_PASSWORD: "${OC_AUTH_PASSWORD}"
        ACCEPT_EULA: "Y"
        MSSQL_PID: "Express"
      ports:
        - "1433:1433"
      volumes:
        - sqlserver_data:/var/opt/mssql
      
  sqlserver-init:
    image: mcr.microsoft.com/mssql-tools
    container_name: sqlinit
    depends_on:
      sqlserver:
        condition: service_started
    entrypoint: >
      /bin/bash -c "
        echo '⏳ aguardando SQL Server...';
        sleep 20;
        /opt/mssql-tools/bin/sqlcmd -S tcp:sqlserver,1433 -U sa -P '${OC_AUTH_PASSWORD}' -d master -i /init.sql;
        echo '✅ script rodado';
      "
    volumes:
      - ./OColecionadorBackEnd/init.sql:/init.sql

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${OC_AUTH_USER}
      POSTGRES_PASSWORD: ${OC_AUTH_PASSWORD}
      POSTGRES_DB: OColecionadorAugmentationsDB
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./OColecionadorAugmentations/init_db.sql:/docker-entrypoint-initdb.d/01_init_db.sql
      - ./init_sentry.sql:/docker-entrypoint-initdb.d/02_init_sentry.sql

  redis:
    image: redis:7
    container_name: redis
    volumes:
      - redis_data:/data

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${OC_AUTH_USER}
      MINIO_ROOT_PASSWORD: ${OC_AUTH_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${OC_AUTH_USER}
      RABBITMQ_DEFAULT_PASS: ${OC_AUTH_PASSWORD}


  ocolecionadorbackend:
    build: ./OColecionadorBackEnd/
    container_name: OColecionadorBackEnd
    depends_on:
      sqlserver-init:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_started
      minio:
        condition: service_started
    environment:
      ASPNETCORE_URLS: "http://+:5000"
    ports:
      - "5000:5000"
    restart: always

  ocolecionadoraugmentations:
    build: ./OColecionadorAugmentations/
    container_name: OColecionadorAugmentations
    deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: all
            capabilities: [gpu]
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_started
      minio:
        condition: service_started
    restart: always

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    ports:
      - "9443:9443"
      - "9002:9000"

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    restart: always
    ports:
      - "3000:3000"
    environment:
      - MB_DB_FILE=/metabase-data/metabase.db
    volumes:
      - metabase-data:/metabase-data

  sentry-init:
    image: getsentry/sentry:latest
    container_name: sentry-init
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
    environment:
      SENTRY_SECRET_KEY: "f4a9c6f0a1a84f7bbf14a1f5f92e68fa"
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_REDIS_HOST: redis
      SENTRY_REDIS_DB: 2
    command: ["upgrade", "--noinput"]

  sentry:
    image: getsentry/sentry:latest
    container_name: sentry
    depends_on:
      sentry-init:
        condition: service_completed_successfully
    environment:
      SENTRY_SECRET_KEY: f4a9c6f0a1a84f7bbf14a1f5f92e68fa
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_REDIS_HOST: redis
      SENTRY_REDIS_DB: 2
    ports:
      - "9003:9000"
    restart: always

  sentry-worker:
    image: getsentry/sentry:latest
    container_name: sentry-worker
    depends_on:
      sentry:
          condition: service_started
    environment:
      SENTRY_SECRET_KEY: f4a9c6f0a1a84f7bbf14a1f5f92e68fa
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_REDIS_HOST: redis
      SENTRY_REDIS_DB: 2
    command: ["run", "worker"]
    restart: always

  sentry-cron:
    image: getsentry/sentry:latest
    container_name: sentry-cron
    depends_on:
      sentry:
          condition: service_started
    environment:
      SENTRY_SECRET_KEY: f4a9c6f0a1a84f7bbf14a1f5f92e68fa
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_REDIS_HOST: redis
      SENTRY_REDIS_DB: 2
    command: ["run", "cron"]
    restart: always

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      ocolecionadorbackend:
        condition: service_started
      rabbitmq:
        condition: service_started
      minio:
        condition: service_started
      metabase:
        condition: service_started
      portainer:
        condition: service_started
      sentry:
        condition: service_started
    ports:
      - "8080:80"

  ngrok:
    image: ngrok/ngrok
    container_name: ngrok
    environment:
      NGROK_AUTHTOKEN: ${OC_NGROCK_TOKEN}
    command: "http --url=louse-model-lioness.ngrok-free.app nginx:80"
    depends_on:
      nginx:
        condition: service_started

volumes:
  sqlserver_data:
  postgres_data:
  minio_data:
  redis_data:
  portainer-data:
  metabase-data:
  